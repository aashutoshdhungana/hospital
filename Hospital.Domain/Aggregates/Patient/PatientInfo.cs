using Hospital.Domain.BaseEntities;
using Hospital.Domain.Exceptions;
using Hospital.Domain.Interfaces;

namespace Hospital.Domain.Aggregates.Patient
{
    public class PatientInfo : AuditedEntity<int>, IAggregateRoot
    {
        private PatientInfo() : base() { }

        public PatientInfo(
            UserInfo.UserInfo userInfo,
            string emergencyContactPerson,
            string emergencyContactNumber,
            int createdBy
            ) : base(createdBy)
        {
            Validate(emergencyContactNumber, emergencyContactPerson);
            UserInfo = userInfo;
            EmergencyContactNumber = emergencyContactNumber;
            EmergencyContactPerson = emergencyContactPerson;
        }
        // Auto generated by ef
        public int PatientId { get; private set; }
        public string EmergencyContactPerson { get; private set; }
        public string EmergencyContactNumber { get; private set; }
        public int UserInfoId { get; private set; }
        public UserInfo.UserInfo UserInfo { get; private set; }
        private readonly List<Appointment.AppointmentInfo> _appointments = new();
        public IReadOnlyCollection<Appointment.AppointmentInfo> Appointments => _appointments.AsReadOnly();

        public void AddAppointment(Appointment.AppointmentInfo appointment)
        {
            _appointments.Add(appointment);
        }

        private void Validate(string emergencyContactNumber, string emergencyContactPerson)
        {
            if (string.IsNullOrEmpty(emergencyContactPerson))
                throw new DomainException("Emergency contact person cannot be null or empty.");

            if (string.IsNullOrEmpty(emergencyContactNumber))
                throw new DomainException("Emergency contact number cannot be empty.");
        }
    }
}
